#+TITLE: Lued Notes
#+AUTHOR: Calvin Beck
#+OPTIONS: ^:{}

* Introduction
  Lued is a debugger. The eventual goal is to embed lua and do some
  fanciness with it.

  The hope is to make this multiplatform in the future, but for now we
  are just going to meander through and make everything work on 64-bit
  Linux (and yes, that really does matter). There are a lot of
  platform specific things which will need to be abstracted out in the
  future. It's not too bad, but I don't want to focus on that right
  away.

  We're not quite there yet.

* Libopcodes
  Documentation for this is hard to find, so I am going to include
  some of the information that I discover here... I have found one
  decent looking potential resource [[http://www.toothycat.net/wiki/wiki.pl?Binutils/libopcodes][here]]. Hopefully this proves to be
  useful!

** Includes
   The main header file which needs to be included to use this library
   is *dis-asm.h*.

** Insns
   Apparently this library uses "insns" as a shortened form of
   "instructions". This is very confusing, but I'm pretty sure that's
   what this means.

** disassemble_info
   This is a structure that is used to pass information to / from
   instruction decoders. A glorious coagulation of state.

   This has a lot of fields for dealing with multiple
   architectures. For example, there are fields for if the endianness
   of the code is different from the endianness of the data, fields to
   handle instruction sets which change during run time, and all
   manner of crazy things.
 
* Mac OS X
  For now support for Mac OS X is to be left on the side. It seems
  that some things are different on the Apple side of things. For
  instance *ptrace* on apple is much different.

  [[http://uninformed.org/index.cgi?v=4&a=3&p=14][OS X ptrace info]]

  In the future this will hopefully be supported, but for now it's a
  bit of a headache to deal with multiple platforms.

* BSD Systems
  Currently we rely upon GNU make features for the Makefile. You will
  need to install gmake.

  The register structures on OpenBSD are different. We will have to
  abstract this in order to make everything work nicely.
